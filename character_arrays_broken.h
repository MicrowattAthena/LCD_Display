#ifndef __CHARACTER_ARRAYS_H
#define __CHARACTER_ARRAYS_H
//Data Array 

int  arrDataBytes[] = { 
//and.bmp
0x0, 0x126, 0xEB, 0xB7, 0xC4, 0x112, 0xF5, 0xEA, 0x79, 0x0, 
//apostrophe.bmp
0x1E, 0x0, 	
//asterix.bmp
0x4, 0x2D, 0xE, 0x2D, 0x4, 
//at.bmp
0x0, 0x163, 0x89, 0x1FC, 0x136, 0x14E, 0x139, 0x1D3, 0x1BC, 0x126, 0x12B, 0x203, 
//a_capital.bmp
0x0, 0x79, 0xF5, 0x6E, 0x4E, 0x32, 0x4E, 0x6E, 0xF5, 0x79, 
//a_lower.bmp
0x0, 0xF2, 0xC9, 0xC9, 0xAE, 0x1C3, 0x0, 
//back_slash.bmp
0x5, 0x56, 0xC2, 0xDD, 
//blank_space.bmp
0x0, 0x0, 0x0, 0x0, 
//b_capital.bmp
0x0, 0x1FA, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x15C, 0x0, 
//b_lower.bmp
0x0, 0x1FA, 0x7D, 0x89, 0x89, 0x7D, 0xE6, 0x0, 
//carat.bmp
0x24, 0x32, 0x5, 0x32, 0x24, 
//closed_brace.bmp
0xC5, 0x3B7, 0x40, 0x0, 
//closed_sq_bracket.bmp
0x0, 0xC5, 0x3F7, 0x0, 
//close_bracket.bmp
0xC5, 0x1BF, 0x173, 0x0, 
//colon.bmp
0x0, 0x89, 0x0, 
//comma.bmp
0x0, 0xA9, 0x109, 0x0, 
//c_capital.bmp
0x0, 0x118, 0x68, 0x7A, 0x7A, 0x7A, 0x68, 0xAA, 0x0, 
//c_lower.bmp
0x0, 0xE6, 0x7D, 0x89, 0x89, 0xF2, 0x0, 
//divider.bmp
0x0, 0x4D8, 0x0, 
//dollar.bmp
0xD2, 0x93, 0x9E, 0x28A, 0x9E, 0x133, 0x0, 
//double_quote.bmp
0x0, 0x1E, 0x0, 0x1E, 0x0, 
//d_capital.bmp
0x0, 0x1FA, 0x7A, 0x7A, 0x7A, 0x7A, 0x68, 0x118, 0x0, 
//d_lower.bmp
0x0, 0xE6, 0x7D, 0x89, 0x89, 0x7D, 0x1FA, 0x0, 
//eight.bmp
0xAA, 0xB2, 0x9E, 0x9E, 0xB2, 0xAA, 0x0, 
//equals.bmp
0x0, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x0, 
//exclamation.bmp
0x0, 0x196, 0x0, 
//e_capital.bmp
0x0, 0x1FA, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x0, 
//e_lower.bmp
0x0, 0xE6, 0xAE, 0xBA, 0xBA, 0xAE, 0xA6, 0x0, 
//five.bmp
0x102, 0xAB, 0x93, 0x93, 0x89, 0xC3, 0x0, 
//forward_slash.bmp
0xDD, 0xC2, 0x4D, 0xE, 
//four.bmp
0x71, 0x64, 0x69, 0x4D, 0x1FA, 0x40, 0x0, 
//fullstop.bmp
0x79, 0x0, 0x0, 
//f_capital.bmp
0x0, 0x1FA, 0x25, 0x25, 0x25, 0x25, 0x1, 0x0, 
//f_lower.bmp
0x10, 0x1FA, 0x11, 
//greaterthan.bmp
0x0, 0x5A, 0x50, 0x50, 0x4A, 0x4A, 0x24, 0x0, 
//g_capital.bmp
0x0, 0x118, 0x68, 0x7A, 0x7A, 0xAB, 0xAB, 0xAE, 0x13F, 0x0, 
//g_lower.bmp
0x0, 0x21F, 0x141, 0x14D, 0x14D, 0x126, 0x27C, 0x0, 
//hash.bmp
0x50, 0x17E, 0xBE, 0x5E, 0x17E, 0xBE, 0x5E, 0x50, 
//h_capital.bmp
0x0, 0x1FA, 0x24, 0x24, 0x24, 0x24, 0x24, 0x1FA, 0x0, 
//h_lower.bmp
0x0, 0x1FA, 0x19, 0x10, 0x10, 0x1DC, 0x0, 
//i_capital.bmp
0x0, 0x1FA, 0x0, 
//i_lower.bmp
0x0, 0x1ED, 0x0, 
//j_capital.bmp
0x0, 0xF5, 0x79, 0x79, 0x79, 0x181, 0x0, 
//j_lower.bmp
0xC4, 0x3EA, 0x0, 
//k_capital.bmp
0x0, 0x1FA, 0x24, 0x19, 0x65, 0x49, 0xB9, 0x7A, 0x0, 
//k_lower.bmp
0x0, 0x1FA, 0x31, 0x95, 0x6A, 0xED, 0x0, 
//lessthan.bmp
0x0, 0x24, 0x4A, 0x4A, 0x50, 0x50, 0x5A, 0x0, 
//l_capital.bmp
0x0, 0x1FA, 0x79, 0x79, 0x79, 0x79, 0x79, 
//l_lower.bmp
0x0, 0x1FA, 0x0, 
//minus.bmp
0x0, 0x40, 0x40, 0x40, 0x40, 0x0, 
//m_capital.bmp
0x0, 0x1FA, 0x5, 0x56, 0xC2, 0xDD, 0xC2, 0x56, 0x5, 0x1FA, 0x0, 
//m_lower.bmp
0x0, 0x1EC, 0x19, 0x10, 0x10, 0x1DC, 0x29, 0x10, 0x10, 0x1DC, 0x0, 
//nine.bmp
0xE7, 0xA1, 0xAB, 0xAB, 0x8C, 0x118, 0x0, 
//n_capital.bmp
0x0, 0x1FA, 0xD, 0x29, 0x55, 0x40, 0xB5, 0x1FA, 0x0, 
//n_lower.bmp
0x0, 0x1EC, 0x19, 0x10, 0x10, 0x1DC, 0x0, 
//one.bmp
0x0, 0x10, 0x9, 0x1FA, 0x0, 0x0, 0x0, 
//open_brace.bmp
0x40, 0x3B7, 0xC5, 0x0, 
//open_bracket.bmp
0x0, 0x1EC, 0x146, 0xC5, 
//open_sq_bracket.bmp
0x0, 0x3F7, 0xC5, 0x0, 
//o_capital.bmp
0x0, 0x118, 0x68, 0x7A, 0x7A, 0x7A, 0x7A, 0x68, 0x118, 0x0, 
//o_lower.bmp
0x0, 0xE6, 0x7D, 0x89, 0x89, 0x7D, 0xE6, 0x0, 
//percent.bmp
0x0, 0x36, 0x25, 0x9E, 0xEB, 0x71, 0x4D, 0x133, 0x9E, 0x9D, 0x126, 0x0, 
//plus.bmp
0x24, 0x24, 0x24, 0x118, 0x24, 0x24, 0x24, 
//p_capital.bmp
0x0, 0x1FA, 0x25, 0x25, 0x25, 0x25, 0x25, 0x36, 0x0, 
//p_lower.bmp
0x0, 0x3E9, 0x7D, 0x89, 0x89, 0x7D, 0xE6, 0x0, 
//questionmark.bmp
0xD, 0x1, 0x10B, 0x32, 0x25, 0x36, 0x0, 
//q_capital.bmp
0x0, 0x118, 0x68, 0x7A, 0x7A, 0xCB, 0x65, 0xB9, 0x221, 0x0, 
//q_lower.bmp
0x0, 0xE6, 0x7D, 0x89, 0x89, 0x7D, 0x3E9, 0x0, 
//r_capital.bmp
0x0, 0x1FA, 0x25, 0x25, 0x25, 0x56, 0x96, 0xEB, 0x79, 
//r_lower.bmp
0x0, 0x1EC, 0x19, 0x10, 
//semicolon.bmp
0x0, 0xA9, 0x119, 0x0, 0x0, 
//seven.bmp
0x1, 0x12F, 0x96, 0x2A, 0xA, 0x5, 0x0, 
//six.bmp
0x118, 0x8C, 0x93, 0x93, 0x89, 0xCF, 0x0, 
//s_capital.bmp
0xAA, 0x81, 0x9E, 0x9E, 0xCF, 0x99, 0xAA, 0x0, 
//s_lower.bmp
0x0, 0xF2, 0xBA, 0xBA, 0xC9, 0xCE, 0x0, 
//three.bmp
0xC2, 0x7A, 0x9E, 0x9E, 0xB2, 0xAA, 0x0, 
//two.bmp
0xEA, 0xCB, 0xBA, 0xAB, 0xA1, 0xAB, 0x0, 
//t_capital.bmp
0x1, 0x1, 0x1, 0x1FA, 0x1, 0x1, 0x1, 
//t_lower.bmp
0x10, 0x1FA, 0x89, 
//underscore.bmp
0x0, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0x0, 
//u_capital.bmp
0x0, 0x11D, 0x64, 0x79, 0x79, 0x79, 0x64, 0x11D, 
//u_lower.bmp
0x0, 0x173, 0x79, 0x79, 0x64, 0x1EC, 0x0, 
//v_capital.bmp
0x1, 0x1D, 0x6E, 0xF5, 0x79, 0xF5, 0x6E, 0x1D, 0x1, 
//v_lower.bmp
0x10, 0x6E, 0xF5, 0x79, 0xF5, 0x6E, 0x10, 
//weird_apostrophe.bmp
0x1, 0x4, 0x0, 
//w_capital.bmp
0x1E, 0xFF, 0xDD, 0xE6, 0x36, 0x1, 0x36, 0xE6, 0xDD, 0xFF, 0x1E, 0x0, 
//w_lower.bmp
0x29, 0xE6, 0xDD, 0xE6, 0x29, 0xE6, 0xDD, 0xE6, 0x29, 
//x_capital.bmp
0x7A, 0x68, 0xAA, 0x6E, 0x4A, 0xAA, 0x68, 0x7A, 
//x_lower.bmp
0x0, 0x89, 0xF2, 0x71, 0xF2, 0x89, 0x0, 
//y_capital.bmp
0x1, 0x4, 0x19, 0x3D, 0x19F, 0x3D, 0x19, 0x4, 0x1, 
//y_lower.bmp
0x10, 0x132, 0x1B9, 0x1B2, 0xF5, 0x6E, 0x10, 
//zero.bmp
0x118, 0x68, 0x7A, 0x7A, 0x68, 0x118, 0x0, 
//z_capital.bmp
0xDE, 0xCB, 0xEB, 0x9E, 0xA3, 0x83, 0x7E, 0x0, 
//z_lower.bmp
0x0, 0xED, 0xDA, 0xFA, 0xAD, 0xA2, 0x0, 

};

char charOffset[94] = {
	'&', '\'', '*', '@', 'A', 'a', '/', ' ', 'B', 'b', '^', '}', ']', ')',
	':', ',', 'C', 'c', '|', '$', '"', 'D', 'd', '8', '=', '!', 'E', 'e',
	'5', '/', '4', '.', 'F', 'f', '>', 'G',  'g', '#', 'H', 'h', 'I', 'i',
	'J', 'j', 'K', 'k', '<', 'L', 'l', '-',  'M', 'm', '9', 'N', 'n', '1',
	'{', '(', '[', 'O', 'o', '%', '+', 'P',  'p', '?', 'Q', 'q', 'R', 'r',
	';', '7', '6', 'S', 's', '3', '2', 'T',  't', '_', 'U', 'u', 'V', 'v',
	'`', 'W', 'w', 'X', 'x', 'Y', 'y', '0',  'Z', 'z',
	};
	
//Offset Array 
int  arrOffset[95] = {
0, 10, 12, 17, 29, 39, 46, 50, 54, 63, 71, 76, 80, 84, 88, 91, 
95, 104, 111, 114, 121, 126, 135, 143, 150, 158, 161, 170, 178, 185, 189, 196, 
199, 207, 210, 218, 228, 236, 244, 253, 260, 263, 266, 273, 276, 285, 292, 300, 
307, 310, 316, 327, 338, 345, 354, 361, 368, 372, 376, 380, 390, 398, 410, 417, 
426, 434, 441, 451, 459, 468, 472, 477, 484, 491, 499, 506, 513, 520, 527, 530, 
539, 547, 554, 563, 570, 573, 585, 594, 602, 609, 618, 625, 632, 640, 647,
};

#endif // __CHARACTER_ARRAYS_H
