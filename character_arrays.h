#ifndef __CHARACTER_ARRAYS_H
#define __CHARACTER_ARRAYS_H
//Data Array 

int  arrDataBytes[] = { 
//and.bmp
0x0, 0x780, 0x8DC, 0x862, 0x8A2, 0x71C, 0x700, 0x980, 0x800, 0x0, 
//apostrophe.bmp
0x1E, 0x0, 
//asterix.bmp
0x4, 0x34, 0xE, 0x34, 0x4, 
//at.bmp
0x0, 0x7E0, 0x810, 0x17E8, 0x2814, 0x4812, 0x4412, 0x4722, 0x48F2, 0x2804, 0x2808, 0x17F0, 
//a_capital.bmp
0x0, 0xFE0, 0x9C, 0x82, 0x82, 0x9C, 0xFE0, 0x0, 
//a_lower.bmp
0x0, 0x660, 0x910, 0x910, 0x4A0, 0xFC0, 0x0, 
//back_slash.bmp
0x6, 0x78, 0x380, 0xC00, 
//blank_space.bmp
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
//b_capital.bmp
0x0, 0xFFE, 0x842, 0x842, 0x842, 0x842, 0x842, 0x7BC, 0x0, 
//b_lower.bmp
0x0, 0xFFE, 0x420, 0x810, 0x810, 0x420, 0x3C0, 0x0, 
//carat.bmp
0x40, 0x38, 0x6, 0x38, 0x40, 
//closed_brace.bmp
0x4002, 0x7EFE, 0x100, 0x0, 
//closed_sq_bracket.bmp
0x0, 0x4002, 0x7FFE, 0x0, 
//close_bracket.bmp
0x4002, 0x380C, 0x7F0, 0x0, 
//colon.bmp
0x0, 0x810, 0x0, 
//comma.bmp
0x0, 0x2000, 0x1800, 0x0, 
//c_capital.bmp
0x0, 0x3F8, 0x404, 0x802, 0x802, 0x802, 0x404, 0x318, 0x0, 
//c_lower.bmp
0x0, 0x3C0, 0x420, 0x810, 0x810, 0x660, 0x0, 
//divider.bmp
0x0, 0xFFFE, 0x0, 
//dollar.bmp
0x61C, 0x822, 0x842, 0x1FFF, 0x842, 0x78C, 0x0, 
//double_quote.bmp
0x0, 0x1E, 0x0, 0x1E, 0x0, 
//d_capital.bmp
0x0, 0xFFE, 0x802, 0x802, 0x802, 0x802, 0x404, 0x3F8, 0x0, 
//d_lower.bmp
0x0, 0x3C0, 0x420, 0x810, 0x810, 0x420, 0xFFE, 0x0, 
//eight.bmp
0x318, 0x4A4, 0x842, 0x842, 0x4A4, 0x318, 0x0, 
//equals.bmp
0x0, 0x120, 0x120, 0x120, 0x120, 0x120, 0x120, 0x0, 
//exclamation.bmp
0x0, 0xBFE, 0x0, 
//e_capital.bmp
0x0, 0xFFE, 0x842, 0x842, 0x842, 0x842, 0x842, 0x842, 0x0, 
//e_lower.bmp
0x0, 0x3C0, 0x4A0, 0x890, 0x890, 0x4A0, 0x2C0, 0x0, 
//five.bmp
0x670, 0x84E, 0x822, 0x822, 0x442, 0x382, 0x0, 
//forward_slash.bmp
0xC00, 0x380, 0x70, 0xE, 
//four.bmp
0x180, 0x140, 0x130, 0x10C, 0xFFE, 0x100, 0x0, 
//fullstop.bmp
0x800, 0x0, 0x0, 
//f_capital.bmp
0x0, 0xFFE, 0x42, 0x42, 0x42, 0x42, 0x42, 0x0, 
//f_lower.bmp
0x10, 0xFFE, 0x12, 
//greaterthan.bmp
0x0, 0x208, 0x110, 0x110, 0xA0, 0xA0, 0x40, 0x0, 
//g_capital.bmp
0x0, 0x3F8, 0x404, 0x802, 0x802, 0x882, 0x882, 0x884, 0x798, 0x0, 
//g_lower.bmp
0x0, 0x33C0, 0x4420, 0x4810, 0x4810, 0x2420, 0x1FF0, 0x0, 
//hash.bmp
0x110, 0xF10, 0x1F0, 0x11E, 0xF10, 0x1F0, 0x11E, 0x110, 
//h_capital.bmp
0x0, 0xFFE, 0x40, 0x40, 0x40, 0x40, 0x40, 0xFFE, 0x0, 
//h_lower.bmp
0x0, 0xFFE, 0x20, 0x10, 0x10, 0xFE0, 0x0, 
//i_capital.bmp
0x0, 0x0, 0x802, 0x802, 0xFFE, 0x802, 0x802, 0x0, 0x0, 
//i_lower.bmp
0x0, 0xFF2, 0x0, 
//j_capital.bmp
0x0, 0x700, 0x800, 0x800, 0x800, 0x7FE, 0x0, 
//j_lower.bmp
0x4000, 0x7FF2, 0x0, 
//k_capital.bmp
0x0, 0xFFE, 0x40, 0xA0, 0x110, 0x208, 0x404, 0x802, 0x0, 
//k_lower.bmp
0x0, 0xFFE, 0x80, 0x1C0, 0x220, 0xC10, 0x0, 
//lessthan.bmp
0x0, 0x40, 0xA0, 0xA0, 0x110, 0x110, 0x208, 0x0, 
//l_capital.bmp
0x0, 0xFFE, 0x800, 0x800, 0x800, 0x800, 0x800, 0x0, 
//l_lower.bmp
0x0, 0xFFE, 0x0, 
//minus.bmp
0x0, 0x100, 0x100, 0x100, 0x100, 0x0, 
//m_capital.bmp
0x0, 0xFFC, 0x2, 0x2, 0x2, 0xC, 0xFF0, 0xC, 0x2, 0x2, 0x2, 0xFFC, 0x0, 
//m_lower.bmp
0x0, 0xFF0, 0x20, 0x10, 0x10, 0xFE0, 0x30, 0x10, 0x10, 0xFE0, 0x0, 
//nine.bmp
0x638, 0x844, 0x882, 0x882, 0x444, 0x3F8, 0x0, 
//n_capital.bmp
0x0, 0xFFE, 0x2, 0x3E, 0x40, 0xF80, 0x800, 0xFFE, 0x0, 
//n_lower.bmp
0x0, 0xFF0, 0x20, 0x10, 0x10, 0xFE0, 0x0, 
//one.bmp
0x0, 0x10, 0x8, 0xFFE, 0x0, 0x0, 0x0, 
//open_brace.bmp
0x100, 0x7EFE, 0x4002, 0x0, 
//open_bracket.bmp
0x0, 0xFF0, 0x300C, 0x4002, 
//open_sq_bracket.bmp
0x0, 0x7FFE, 0x4002, 0x0, 
//o_capital.bmp
0x0, 0x3F8, 0x404, 0x802, 0x802, 0x802, 0x802, 0x404, 0x3F8, 0x0, 
//o_lower.bmp
0x0, 0x3C0, 0x420, 0x810, 0x810, 0x420, 0x3C0, 0x0, 
//percent.bmp
0x0, 0x3C, 0x42, 0x842, 0x63C, 0x180, 0x70, 0x78C, 0x842, 0x840, 0x780, 0x0, 
//plus.bmp
0x40, 0x40, 0x40, 0x3F8, 0x40, 0x40, 0x40, 
//p_capital.bmp
0x0, 0xFFE, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x0, 
//p_lower.bmp
0x0, 0x7FF0, 0x420, 0x810, 0x810, 0x420, 0x3C0, 0x0, 
//questionmark.bmp
0xC, 0x2, 0xB02, 0x82, 0x42, 0x3C, 0x0, 
//q_capital.bmp
0x0, 0x3F8, 0x404, 0x802, 0x802, 0xA02, 0xE02, 0xC04, 0x1BF8, 0x1000, 0x0, 
//q_lower.bmp
0x0, 0x3C0, 0x420, 0x810, 0x810, 0x420, 0x7FF0, 0x0, 
//r_capital.bmp
0x0, 0xFFE, 0x42, 0x42, 0x42, 0xC2, 0x142, 0xE3C, 0x0, 
//r_lower.bmp
0x0, 0xFF0, 0x20, 0x10, 
//semicolon.bmp
0x0, 0x2000, 0x1810, 0x0, 0x0, 
//seven.bmp
0x2, 0xE02, 0x1C2, 0x32, 0xA, 0x6, 0x0, 
//six.bmp
0x3F8, 0x444, 0x822, 0x822, 0x442, 0x38C, 0x0, 
//s_capital.bmp
0x0, 0x318, 0x424, 0x842, 0x842, 0x8C2, 0x484, 0x318, 0x0, 
//s_lower.bmp
0x0, 0x660, 0x890, 0x890, 0x910, 0x620, 0x0, 
//three.bmp
0x60C, 0x802, 0x842, 0x842, 0x4A4, 0x318, 0x0, 
//two.bmp
0xC0C, 0xA02, 0x902, 0x882, 0x844, 0x838, 0x0, 
//t_capital.bmp
0x0, 0x2, 0x2, 0x2, 0xFFE, 0x2, 0x2, 0x2, 0x0, 
//t_lower.bmp
0x10, 0xFFE, 0x810, 
//underscore.bmp
0x0, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x0, 
//u_capital.bmp
0x0, 0x3FE, 0x400, 0x800, 0x800, 0x800, 0x400, 0x3FE, 0x0, 
//u_lower.bmp
0x0, 0x7F0, 0x800, 0x800, 0x400, 0xFF0, 0x0, 
//v_capital.bmp
0x0, 0x1FE, 0x200, 0x400, 0x800, 0x400, 0x200, 0x1FE, 0x0, 
//v_lower.bmp
0x10, 0xE0, 0x700, 0x800, 0x700, 0xE0, 0x10, 
//weird_apostrophe.bmp
0x2, 0x4, 0x0, 
//w_capital.bmp
0x0, 0x7FE, 0x800, 0x800, 0x800, 0x600, 0x1FE, 0x600, 0x800, 0x800, 0x800, 0x7FE, 0x0, 
//w_lower.bmp
0x30, 0x3C0, 0xC00, 0x3C0, 0x30, 0x3C0, 0xC00, 0x3C0, 0x30, 
//x_capital.bmp
0x0, 0xE0E, 0x110, 0xA0, 0x40, 0xA0, 0x110, 0xE0E, 0x0, 
//x_lower.bmp
0x0, 0x810, 0x660, 0x180, 0x660, 0x810, 0x0, 
//y_capital.bmp
0x0, 0xE, 0x10, 0x20, 0x7C0, 0x20, 0x10, 0xE, 0x0, 
//y_lower.bmp
0x10, 0x40E0, 0x4700, 0x3800, 0x700, 0xE0, 0x10, 
//zero.bmp
0x3F8, 0x404, 0x802, 0x802, 0x404, 0x3F8, 0x0, 
//z_capital.bmp
0x0, 0xC02, 0xA02, 0x982, 0x842, 0x832, 0x80A, 0x806, 0x0, 
//z_lower.bmp
0x0, 0xC10, 0xA10, 0x990, 0x850, 0x830, 0x0, 

};

char charOffset[94] = {
	'&', '\'', '*', '@', 'A', 'a', '/', ' ', 'B', 'b', '^', '}', ']', ')',
	':', ',', 'C', 'c', '|', '$', '"', 'D', 'd', '8', '=', '!', 'E', 'e',
	'5', '/', '4', '.', 'F', 'f', '>', 'G',  'g', '#', 'H', 'h', 'I', 'i',
	'J', 'j', 'K', 'k', '<', 'L', 'l', '-',  'M', 'm', '9', 'N', 'n', '1',
	'{', '(', '[', 'O', 'o', '%', '+', 'P',  'p', '?', 'Q', 'q', 'R', 'r',
	';', '7', '6', 'S', 's', '3', '2', 'T',  't', '_', 'U', 'u', 'V', 'v',
	'`', 'W', 'w', 'X', 'x', 'Y', 'y', '0',  'Z', 'z',
	};
	
//Offset Array 
int  arrOffset[95] = {
0, 10, 12, 17, 29, 37, 44, 48, 56, 65, 73, 78, 82, 86, 90, 93, 97, 106, 113, 116, 123, 128, 137, 145, 152, 160, 163, 172, 180, 187, 191, 198, 201, 209, 212, 220, 230, 238, 246, 255, 262, 271, 274, 281, 284, 293, 300, 308, 316, 319, 325, 338, 349, 356, 365, 372, 379, 383, 387, 391, 401, 409, 421, 428, 437, 445, 452, 463, 471, 480, 484, 489, 496, 503, 512, 519, 526, 533, 542, 545, 554, 563, 570, 579, 586, 589, 602, 611, 620, 627, 636, 643, 650, 659, 
};

#endif // __CHARACTER_ARRAYS_H
